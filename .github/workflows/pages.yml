name: Build and Publish Site

on:
  schedule:
    - cron: '17 6 * * *'   # daily at 06:17 UTC
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Debug helper: see where files actually are
      - name: Show repo layout
        run: |
          pwd
          echo "Solutions:"; find . -maxdepth 6 -name "*.sln" -print
          echo "Projects:";  find . -maxdepth 10 -name "*.csproj" -print

      # ---------- Hello ----------
      - name: Locate Hello worker
        id: locate_hello
        run: |
          set -euo pipefail
          csproj="$(find "$GITHUB_WORKSPACE" -type f -maxdepth 10 -iname 'Hello.Worker.csproj' -print -quit)"
          if [ -z "$csproj" ]; then
            echo "Could not find Hello.Worker.csproj" >&2
            exit 1
          fi
          echo "csproj=$csproj"   >> "$GITHUB_OUTPUT"
          echo "projdir=$(dirname "$csproj")" >> "$GITHUB_OUTPUT"

      - name: Restore (Hello)
        run: dotnet restore "${{ steps.locate_hello.outputs.csproj }}"

      - name: Build (Hello)
        run: dotnet build "${{ steps.locate_hello.outputs.csproj }}" -c Release --no-restore

      - name: Run Hello worker (writes to /out/hello)
        working-directory: ${{ steps.locate_hello.outputs.projdir }}
        env:
          OUTPUT_DIR: ${{ github.workspace }}/out
        run: dotnet run -c Release

      # ---------- Strava ----------
      - name: Locate Strava worker
        id: locate_strava
        run: |
          set -euo pipefail
          csproj="$(find "$GITHUB_WORKSPACE" -type f -maxdepth 10 -iname 'Strava.Worker.csproj' -print -quit)"
          if [ -z "$csproj" ]; then
            echo "Could not find Strava.Worker.csproj" >&2
            exit 1
          fi
          echo "csproj=$csproj"   >> "$GITHUB_OUTPUT"
          echo "projdir=$(dirname "$csproj")" >> "$GITHUB_OUTPUT"

      - name: Restore (Strava)
        run: dotnet restore "${{ steps.locate_strava.outputs.csproj }}"

      - name: Build (Strava)
        run: dotnet build "${{ steps.locate_strava.outputs.csproj }}" -c Release --no-restore

      - name: Run Strava worker (writes to /out/strava)
        working-directory: ${{ steps.locate_strava.outputs.projdir }}
        env:
          OUTPUT_DIR: ${{ github.workspace }}/out
          STRAVA_CLIENT_ID:     ${{ secrets.STRAVA_CLIENT_ID }}
          STRAVA_CLIENT_SECRET: ${{ secrets.STRAVA_CLIENT_SECRET }}
          STRAVA_REFRESH_TOKEN: ${{ secrets.STRAVA_REFRESH_TOKEN }}
        run: dotnet run -c Release

      # ---------- Photos (Dropbox) ----------
      - name: Locate Photos worker
        id: locate_photos
        run: |
          set -euo pipefail
          csproj="$(find "$GITHUB_WORKSPACE" -type f -maxdepth 10 -iname 'Photos.Worker.csproj' -print -quit)"
          if [ -z "$csproj" ]; then
            echo "Could not find Photos.Worker.csproj" >&2
            exit 1
          fi
          echo "csproj=$csproj"   >> "$GITHUB_OUTPUT"
          echo "projdir=$(dirname "$csproj")" >> "$GITHUB_OUTPUT"

      - name: Restore (Photos)
        run: dotnet restore "${{ steps.locate_photos.outputs.csproj }}"

      - name: Build (Photos)
        run: dotnet build "${{ steps.locate_photos.outputs.csproj }}" -c Release --no-restore

      - name: Run Photos worker (writes to /out/photos)
        working-directory: ${{ steps.locate_photos.outputs.projdir }}
        env:
          OUTPUT_DIR: ${{ github.workspace }}/out
          DROPBOX_APP_KEY:        ${{ secrets.DROPBOX_APP_KEY }}
          DROPBOX_APP_SECRET:     ${{ secrets.DROPBOX_APP_SECRET }}
          DROPBOX_REFRESH_TOKEN:  ${{ secrets.DROPBOX_REFRESH_TOKEN }}
          DROPBOX_PHOTOS_FOLDER: '/Public/Photos'
        run: dotnet run -c Release

      # ---------- Home ----------
      - name: Locate Home worker
        id: locate_home
        run: |
          set -euo pipefail
          csproj="$(find "$GITHUB_WORKSPACE" -type f -maxdepth 10 -iname 'Home.Worker.csproj' -print -quit)"
          if [ -z "$csproj" ]; then
            echo "Could not find Home.Worker.csproj" >&2
            exit 1
          fi
          echo "csproj=$csproj"   >> "$GITHUB_OUTPUT"
          echo "projdir=$(dirname "$csproj")" >> "$GITHUB_OUTPUT"

      - name: Restore (Home)
        run: dotnet restore "${{ steps.locate_home.outputs.csproj }}"

      - name: Build (Home)
        run: dotnet build "${{ steps.locate_home.outputs.csproj }}" -c Release --no-restore

      - name: Run Home worker (writes to /out/index.html)
        working-directory: ${{ steps.locate_home.outputs.projdir }}
        env:
          OUTPUT_DIR: ${{ github.workspace }}/out
        run: dotnet run -c Release


      # ---------- Publish ----------
      - name: Configure Pages
        uses: actions/configure-pages@v5
        with:
          enablement: true

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ github.workspace }}/out
          name: github-pages

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
