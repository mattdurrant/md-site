name: Build and Publish Site

on:
  schedule:
    - cron: '17 6 * * *'   # daily at 06:17 UTC
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Debug helper: see where files actually are
      - name: Show repo layout
        run: |
          pwd
          echo "Solutions:"; find . -maxdepth 6 -name "*.sln" -print
          echo "Projects:";  find . -maxdepth 10 -name "*.csproj" -print

      # ---------- Strava ----------
      - name: Locate Strava worker
        id: locate_strava
        run: |
          set -euo pipefail
          csproj="$(find "$GITHUB_WORKSPACE" -type f -maxdepth 10 -iname 'Strava.Worker.csproj' -print -quit)"
          if [ -z "$csproj" ]; then
            echo "Could not find Strava.Worker.csproj" >&2
            exit 1
          fi
          echo "csproj=$csproj"   >> "$GITHUB_OUTPUT"
          echo "projdir=$(dirname "$csproj")" >> "$GITHUB_OUTPUT"

      - name: Restore (Strava)
        run: dotnet restore "${{ steps.locate_strava.outputs.csproj }}"

      - name: Build (Strava)
        run: dotnet build "${{ steps.locate_strava.outputs.csproj }}" -c Release --no-restore

      - name: Run Strava worker (writes to /out/strava)
        working-directory: ${{ steps.locate_strava.outputs.projdir }}
        env:
          OUTPUT_DIR: ${{ github.workspace }}/out
          STRAVA_CLIENT_ID:     ${{ secrets.STRAVA_CLIENT_ID }}
          STRAVA_CLIENT_SECRET: ${{ secrets.STRAVA_CLIENT_SECRET }}
          STRAVA_REFRESH_TOKEN: ${{ secrets.STRAVA_REFRESH_TOKEN }}
        run: dotnet run -c Release

      # ---------- Photos (Dropbox) ----------
      - name: Locate Photos worker
        id: locate_photos
        run: |
          set -euo pipefail
          csproj="$(find "$GITHUB_WORKSPACE" -type f -maxdepth 10 -iname 'Photos.Worker.csproj' -print -quit)"
          if [ -z "$csproj" ]; then
            echo "Could not find Photos.Worker.csproj" >&2
            exit 1
          fi
          echo "csproj=$csproj"   >> "$GITHUB_OUTPUT"
          echo "projdir=$(dirname "$csproj")" >> "$GITHUB_OUTPUT"

      - name: Restore (Photos)
        run: dotnet restore "${{ steps.locate_photos.outputs.csproj }}"

      - name: Build (Photos)
        run: dotnet build "${{ steps.locate_photos.outputs.csproj }}" -c Release --no-restore

      - name: Run Photos worker (writes to /out/photos)
        working-directory: ${{ steps.locate_photos.outputs.projdir }}
        env:
          OUTPUT_DIR: ${{ github.workspace }}/out
          DROPBOX_APP_KEY:        ${{ secrets.DROPBOX_APP_KEY }}
          DROPBOX_APP_SECRET:     ${{ secrets.DROPBOX_APP_SECRET }}
          DROPBOX_REFRESH_TOKEN:  ${{ secrets.DROPBOX_REFRESH_TOKEN }}
          DROPBOX_PHOTOS_FOLDER: '/Public/Photos'
        run: dotnet run -c Release

      # ---------- Goodreads ----------
      - name: Locate Goodreads worker
        id: locate_goodreads
        run: |
          set -euo pipefail
          csproj="$(find "$GITHUB_WORKSPACE" -type f -maxdepth 10 -iname 'Goodreads.Worker.csproj' -print -quit)"
          if [ -z "$csproj" ]; then
            echo "Could not find Goodreads.Worker.csproj" >&2
            exit 1
          fi
          echo "csproj=$csproj"   >> "$GITHUB_OUTPUT"
          echo "projdir=$(dirname "$csproj")" >> "$GITHUB_OUTPUT"

      - name: Restore (Goodreads)
        run: dotnet restore "${{ steps.locate_goodreads.outputs.csproj }}"

      - name: Build (Goodreads)
        run: dotnet build "${{ steps.locate_goodreads.outputs.csproj }}" -c Release --no-restore

      - name: Run Goodreads worker (writes to /out/books)
        working-directory: ${{ steps.locate_goodreads.outputs.projdir }}
        env:
          OUTPUT_DIR: ${{ github.workspace }}/out
          GOODREADS_RSS_URL: ${{ secrets.GOODREADS_RSS_URL }}  # set this in repo Secrets
        run: dotnet run -c Release

      # ---------- Albums (Spotify + eBay) ----------
      - name: Locate Albums worker
        id: locate_albums
        run: |
          set -euo pipefail
          csproj="$(find "$GITHUB_WORKSPACE" -type f -maxdepth 10 -iname 'Albums.Worker.csproj' -print -quit)"
          if [ -z "$csproj" ]; then
            echo "Could not find Albums.Worker.csproj" >&2
            exit 1
          fi
          echo "csproj=$csproj"   >> "$GITHUB_OUTPUT"
          echo "projdir=$(dirname "$csproj")" >> "$GITHUB_OUTPUT"

      - name: Restore (Albums)
        run: dotnet restore "${{ steps.locate_albums.outputs.csproj }}"

      - name: Build (Albums)
        run: dotnet build "${{ steps.locate_albums.outputs.csproj }}" -c Release --no-restore

      - name: Run Albums worker (writes /albums and /ebay)
        working-directory: ${{ steps.locate_albums.outputs.projdir }}
        env:
          OUTPUT_DIR:              ${{ github.workspace }}/out/albums
          EBAY_OUTPUT_DIR:         ${{ github.workspace }}/out
          # Spotify
          SPOTIFY_CLIENT_ID:       ${{ secrets.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET:   ${{ secrets.SPOTIFY_CLIENT_SECRET }}
          SPOTIFY_REFRESH_TOKEN:   ${{ secrets.SPOTIFY_REFRESH_TOKEN }}
          # Playlists / config
          STAR_PLAYLISTS:          ${{ vars.STAR_PLAYLISTS }}
          FILLER_PLAYLIST_ID:      ${{ vars.FILLER_PLAYLIST_ID }}
          EXCLUDED_PLAYLIST_ID:    ${{ vars.EXCLUDED_PLAYLIST_ID }}
          PURCHASED_PLAYLIST_ID:   ${{ vars.PURCHASED_PLAYLIST_ID }}
          TOP_N:                   ${{ vars.TOP_N }}
          # Cache (if your code uses it)
          CACHE_URL:               ${{ vars.CACHE_URL }}
          CACHE_TTL_DAYS:          ${{ vars.CACHE_TTL_DAYS }}
          # eBay
          EBAY_CLIENT_ID:          ${{ secrets.EBAY_CLIENT_ID }}
          EBAY_CLIENT_SECRET:      ${{ secrets.EBAY_CLIENT_SECRET }}
          EBAY_MARKETPLACE:        ${{ vars.EBAY_MARKETPLACE }}
          EBAY_DELIVERY_CC:        ${{ vars.EBAY_DELIVERY_CC }}
          EBAY_MAX_PRICE_GBP:      ${{ vars.EBAY_MAX_PRICE_GBP }}
          EBAY_PAGES_PER_QUERY:    ${{ vars.EBAY_PAGES_PER_QUERY }}
          EBAY_LIMIT_PER_PAGE:     ${{ vars.EBAY_LIMIT_PER_PAGE }}
          EBAY_QUERY_CONCURRENCY:  ${{ vars.EBAY_QUERY_CONCURRENCY }}
          EBAY_MAX_RESULTS:        ${{ vars.EBAY_MAX_RESULTS }}
        run: dotnet run -c Release

      # ---------- Feed (homepage) ----------
      - name: Locate Feed worker
        id: locate_feed
        run: |
          set -euo pipefail
          csproj="$(find "$GITHUB_WORKSPACE" -type f -maxdepth 10 -iname 'Feed.Worker.csproj' -print -quit)"
          if [ -z "$csproj" ]; then
            echo "Could not find Feed.Worker.csproj" >&2
            exit 1
          fi
          echo "csproj=$csproj"   >> "$GITHUB_OUTPUT"
          echo "projdir=$(dirname "$csproj")" >> "$GITHUB_OUTPUT"
      
      - name: Restore (Feed)
        run: dotnet restore "${{ steps.locate_feed.outputs.csproj }}"
      
      - name: Build (Feed)
        run: dotnet build "${{ steps.locate_feed.outputs.csproj }}" -c Release --no-restore
      
      - name: Run Feed worker (writes /out/index.html)
        working-directory: ${{ steps.locate_feed.outputs.projdir }}
        env:
          OUTPUT_DIR: ${{ github.workspace }}/out
          # Strava (optional)
          STRAVA_CLIENT_ID:     ${{ secrets.STRAVA_CLIENT_ID }}
          STRAVA_CLIENT_SECRET: ${{ secrets.STRAVA_CLIENT_SECRET }}
          STRAVA_REFRESH_TOKEN: ${{ secrets.STRAVA_REFRESH_TOKEN }}
          # Dropbox (optional)
          DROPBOX_APP_KEY:        ${{ secrets.DROPBOX_APP_KEY }}
          DROPBOX_APP_SECRET:     ${{ secrets.DROPBOX_APP_SECRET }}
          DROPBOX_REFRESH_TOKEN:  ${{ secrets.DROPBOX_REFRESH_TOKEN }}
          DROPBOX_PHOTOS_FOLDER:  '/Public/Photos'
          # Goodreads (optional)
          GOODREADS_RSS_URL:    ${{ secrets.GOODREADS_RSS_URL }}
        run: dotnet run -c Release


      - name: Copy static assets
        run: |
          mkdir -p "${{ github.workspace }}/out"
          cp -v assets/styles.css  "${{ github.workspace }}/out/styles.css"
          cp -v assets/albums.css  "${{ github.workspace }}/out/albums.css"

      # ---------- Publish ----------
      - name: Configure Pages
        uses: actions/configure-pages@v5
        with:
          enablement: true

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ github.workspace }}/out
          name: github-pages

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
