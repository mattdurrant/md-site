name: Refresh Feed (4x daily)

on:
  schedule:
    - cron: '07 0,6,12,18 * * *'   # 00:07, 06:07, 12:07, 18:07 UTC
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages-feed"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # --- Feed ---
      - name: Locate Feed worker
        id: locate_feed
        run: |
          set -euo pipefail
          csproj="$(find "$GITHUB_WORKSPACE" -type f -maxdepth 10 -iname 'Feed.Worker.csproj' -print -quit)"
          echo "csproj=$csproj"   >> "$GITHUB_OUTPUT"
          echo "projdir=$(dirname "$csproj")" >> "$GITHUB_OUTPUT"

      - name: Restore (Feed)
        run: dotnet restore "${{ steps.locate_feed.outputs.csproj }}"

      - name: Build (Feed)
        run: dotnet build "${{ steps.locate_feed.outputs.csproj }}" -c Release --no-restore

      - name: Run Feed (writes /out/index.html)
        working-directory: ${{ steps.locate_feed.outputs.projdir }}
        env:
          OUTPUT_DIR: ${{ github.workspace }}/out
          STRAVA_CLIENT_ID:     ${{ secrets.STRAVA_CLIENT_ID }}
          STRAVA_CLIENT_SECRET: ${{ secrets.STRAVA_CLIENT_SECRET }}
          STRAVA_REFRESH_TOKEN: ${{ secrets.STRAVA_REFRESH_TOKEN }}
          DROPBOX_APP_KEY:        ${{ secrets.DROPBOX_APP_KEY }}
          DROPBOX_APP_SECRET:     ${{ secrets.DROPBOX_APP_SECRET }}
          DROPBOX_REFRESH_TOKEN:  ${{ secrets.DROPBOX_REFRESH_TOKEN }}
          DROPBOX_PHOTOS_FOLDER:  '/Public/Photos'
          GOODREADS_RSS_URL: "${{ secrets.GOODREADS_RSS_URL }}"
        run: dotnet run -c Release

      # --- Fitness (/fitness) ---
      - name: Locate Fitness worker
        id: locate_fitness
        run: |
          set -euo pipefail
          csproj="$(find "$GITHUB_WORKSPACE" -type f -maxdepth 10 -iname 'Fitness.Worker.csproj' -print -quit)"
          echo "csproj=$csproj"   >> "$GITHUB_OUTPUT"
          echo "projdir=$(dirname "$csproj")" >> "$GITHUB_OUTPUT"

      - name: Restore (Fitness)
        run: dotnet restore "${{ steps.locate_fitness.outputs.csproj }}"

      - name: Build (Fitness)
        run: dotnet build "${{ steps.locate_fitness.outputs.csproj }}" -c Release --no-restore

      - name: Run Fitness (writes /out/fitness)
        working-directory: ${{ steps.locate_fitness.outputs.projdir }}
        env:
          OUTPUT_DIR: ${{ github.workspace }}/out
          STRAVA_CLIENT_ID:     ${{ secrets.STRAVA_CLIENT_ID }}
          STRAVA_CLIENT_SECRET: ${{ secrets.STRAVA_CLIENT_SECRET }}
          STRAVA_REFRESH_TOKEN: ${{ secrets.STRAVA_REFRESH_TOKEN }}
        run: dotnet run -c Release

      # --- Photos (/photos) ---
      - name: Locate Photos worker
        id: locate_photos
        run: |
          set -euo pipefail
          csproj="$(find "$GITHUB_WORKSPACE" -type f -maxdepth 10 -iname 'Photos.Worker.csproj' -print -quit)"
          echo "csproj=$csproj"   >> "$GITHUB_OUTPUT"
          echo "projdir=$(dirname "$csproj")" >> "$GITHUB_OUTPUT"

      - name: Restore (Photos)
        run: dotnet restore "${{ steps.locate_photos.outputs.csproj }}"

      - name: Build (Photos)
        run: dotnet build "${{ steps.locate_photos.outputs.csproj }}" -c Release --no-restore

      - name: Run Photos (writes /out/photos)
        working-directory: ${{ steps.locate_photos.outputs.projdir }}
        env:
          OUTPUT_DIR: ${{ github.workspace }}/out
          DROPBOX_APP_KEY:        ${{ secrets.DROPBOX_APP_KEY }}
          DROPBOX_APP_SECRET:     ${{ secrets.DROPBOX_APP_SECRET }}
          DROPBOX_REFRESH_TOKEN:  ${{ secrets.DROPBOX_REFRESH_TOKEN }}
          DROPBOX_PHOTOS_FOLDER: '/Public/Photos'
        run: dotnet run -c Release

      # --- Books (/books) ---
      - name: Locate Goodreads worker
        id: locate_goodreads
        run: |
          set -euo pipefail
          csproj="$(find "$GITHUB_WORKSPACE" -type f -maxdepth 10 -iname 'Goodreads.Worker.csproj' -print -quit)"
          echo "csproj=$csproj"   >> "$GITHUB_OUTPUT"
          echo "projdir=$(dirname "$csproj")" >> "$GITHUB_OUTPUT"

      - name: Restore (Goodreads)
        run: dotnet restore "${{ steps.locate_goodreads.outputs.csproj }}"

      - name: Build (Goodreads)
        run: dotnet build "${{ steps.locate_goodreads.outputs.csproj }}" -c Release --no-restore

      - name: Run Goodreads (writes /out/books)
        if: ${{ secrets.GOODREADS_RSS_URL != '' }}
        working-directory: ${{ steps.locate_goodreads.outputs.projdir }}
        env:
          OUTPUT_DIR: ${{ github.workspace }}/out
          GOODREADS_RSS_URL: "${{ secrets.GOODREADS_RSS_URL }}"
        run: dotnet run -c Release

      # CNAME + upload
      - name: Write CNAME
        run: echo "www.mattdurrant.com" > "${{ github.workspace }}/out/CNAME"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ github.workspace }}/out
          name: github-pages

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
